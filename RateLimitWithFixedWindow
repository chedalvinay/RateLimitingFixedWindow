import java.util.HashMap;
import java.util.Map;

public class Main {
    public static void main(String[] args) throws InterruptedException {
        Limiter limiter = new Limiter();
        System.out.println("Sent to API Gateway Server? " + (limiter.request("1234") ? "Yes" : "No"));
        System.out.println("Sent to API Gateway Server? " + (limiter.request("1234") ? "Yes" : "No"));
        System.out.println("Sent to API Gateway Server? " + (limiter.request("1234") ? "Yes" : "No"));
        System.out.println("Sent to API Gateway Server? " + (limiter.request("1234") ? "Yes" : "No"));
        Thread.sleep(1000);
        System.out.println("Sent to API Gateway Server? " + (limiter.request("1234") ? "Yes" : "No"));
        System.out.println("Sent to API Gateway Server? " + (limiter.request("1234") ? "Yes" : "No"));

    }

    public static class Limiter {

        private static final Map<String, FixedWindow> hashMap = new HashMap<>();
        // how many request you are going allow
        private static final int THRESHOLD = 3;
        // this is the period, if it is 1 it means you are gonna allow 3 request in 1 second
        private static final int PERIOD_IN_SECONDS = 1;

        static class FixedWindow {
            public int count;
            public long timestamp;

            public FixedWindow(int count, long timestamp) {
                this.count = count;
                this.timestamp = timestamp;
            }
        }

        public boolean request(String workspaceId) {
            // this method returns true or false.
            // If we have exceeded the limit, it will return false signifying the request was dropped.
            // otherwise true
            FixedWindow fixedWindow = hashMap.get(workspaceId);
            long currentTime = System.currentTimeMillis();
            if (fixedWindow == null || currentTime - fixedWindow.timestamp > PERIOD_IN_SECONDS * 1000L) {
                System.out.println("currentTime : " + currentTime);
                hashMap.put(workspaceId, new FixedWindow(1, currentTime));
                return true;
            } else {
                // check if we have breached the count already
                if (fixedWindow.count < THRESHOLD) {
                    System.out.println("fixedWindow : " + fixedWindow.count);
                    fixedWindow.count += 1;
                    hashMap.put(workspaceId, fixedWindow);
                    return true;
                } else {
                    return false;
                }
            }
        }
    }
}
